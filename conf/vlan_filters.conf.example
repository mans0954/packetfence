# Vlan filter configuration
# 
# you can trigger rule on specific scope (NormalVlan, RegistrationVlan, ViolationVlan, AutoRegister, InlineVlan, NodeInfoForAutoReg)
#
# Make a simple rule like this:
#
# [category]
# filter = node_info
# operator = is
# attribute = category
# value = default
#
# [1:category]
# scope = NormalVlan
# role = nointernet
#
# It means that when PacketFence tries to get the normal VLAN for the node and if the category of the node is
# the default one, we return the role "nointernet" (which you will have configured in the switch configuration).
#
# Advanced rule:
#
# [2]
# filter = node_info
# attribute = category
# operator = match
# value = ^default$
#
# [3]
# filter = ssid
# operator = is
# value = OpenWrt-SECURE
#
# [4]
# filter = time
# operator = is
# value = wd {Mon Tue Wed Thu Fri} hr {11am-2pm}
#
# [2:2&3&4]
# scope = NormalVlan
# role = nointernet
#
# It means that when PacketFence tries to get the normal VLAN for the node and if the category of the node is 
# the default one and the ssid is OpenWrt-SECURE and the time is between 11am and 2pm from Monday to Friday,
# we return the role "nointernet" (which you will have configured in the switch configuration).
#
# Web API call:
#
# [3:3]
# scope = NormalVlan
# action = trigger_violation
# action_param = mac = $mac, tid = 1100010, type = INTERNAL
#
# It means that if the SSID is OpenWrt-SECURE then we send a API call to the function trigger_violation and
# trigger the violation 1100010
#
# action_param is computed by PacketFence so you can set static and dynamic values
#
# filter can be:
#
#     node_info
#     switch
#     ifIndex
#     mac
#     connection_type
#     username
#     ssid
#     time
#     owner
#     radius_request
#
# operator can be:
#     is
#     is_not
#     match
#     match_not
#
# attribute can be:
#
# - for the node_info:
#     autoreg
#     status
#     bypass_vlan
#     bandwidth_balance
#     regdate
#     pid
#     category
#     mac
#     last_arp
#     lastskip
#     last_dhcp
#     user_agent
#     computername
#     dhcp_fingerprint
#     detect_date
#     voip
#     notes
#     time_balance
#     sessionid
#     unregdate
#
# - for switch:
#     _switchMac
#     _switchIp
#     _ip
#     _controllerIp
#     _id
#
# - for connection_type
#    Wireless-802.11-EAP
#    Wireless-802.11-NoEAP
#    Ethernet-EAP
#    Ethernet-NoEAP
#    SNMP-Traps
#    Inline
#    WIRED_MAC_AUTH
#
# - for the owner
#    pid
#    firstname
#    lastname
#    email
#    telephone
#    company
#    address
#    notes
#    sponsor
#    anniversary
#    birthday
#    gender
#    lang
#    nickname
#    cell_phone
#    work_phone
#    title
#    building_number
#    apartment_number
#    room_number
#    custom_field_1
#    custom_field_2
#    custom_field_3
#    custom_field_4
#    custom_field_5
#    custom_field_6
#    custom_field_7
#    custom_field_8
#    custom_field_9
#    portal
#    source
#    nodes
#    password
#    valid_from
#    expiration
#    access_duration
#    access_level
#    can_sponsor
#    unregdate
#    category
#
# - for the radius_request
#    All the attributes you can have in the RADIUS request (run FreeRADIUS in debug mode to see these attributes)
#
# action can be:
#
#    deregister_node (require param => mac)
#    register_node (require param => mac pid)
#    modify_node (require param => mac)
#    trigger_violation (require param => mac tid type)
#
# action_param can be:
#    The require param and optional attributes like (for action = modify_node):
#    action_param = mac = $mac, notes = $radius_request->{'Called-Station-Id'}
#
#
# The value of a time is specific and follow this logic:
# http://search.cpan.org/~pryan/Period-1.20/Period.pm
# For example, if you want to allow access from Monday to Friday, 9am to 11am and from 2pm to 4pm:
# wd {Mon Tue Wed Thu Fri} hr {9am-11am}, wd {Mon Tue Wed Thu Fri} hr {2pm-4am}

